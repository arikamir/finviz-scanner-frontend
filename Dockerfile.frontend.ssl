# Multi-stage build for production frontend with flexible SSL support
FROM nginx:alpine as builder

# Install gettext for envsubst
RUN apk add --no-cache gettext

# Copy template files
COPY nginx.conf.template /etc/nginx/nginx.conf.template

# Production stage
FROM nginx:alpine as production

# Install required packages
RUN apk add --no-cache gettext curl openssl &&\
    rm -rf /var/cache/apk/*

# Copy HTML and configurations
COPY frontend.html /usr/share/nginx/html/index.html
COPY --from=builder /etc/nginx/nginx.conf.template /etc/nginx/nginx.conf.template
COPY nginx.conf.standalone /etc/nginx/nginx.conf.standalone

# Create optimized startup script with SSL flexibility
RUN printf '#!/bin/sh\n\
export DOMAIN_NAME=${DOMAIN_NAME:-localhost}\n\
export BACKEND_HOST=${BACKEND_HOST:-backend}\n\
export BACKEND_PORT=${BACKEND_PORT:-8000}\n\
export STANDALONE_MODE=${STANDALONE_MODE:-false}\n\
export SSL_MODE=${SSL_MODE:-letsencrypt}\n\
\n\
echo "Starting nginx with domain: $DOMAIN_NAME"\n\
\n\
if [ "$STANDALONE_MODE" = "true" ]; then\n\
    echo "Running in STANDALONE mode (no backend required)"\n\
    if [ -f "/etc/nginx/nginx.conf.standalone" ]; then\n\
        envsubst "\\$DOMAIN_NAME" < /etc/nginx/nginx.conf.standalone > /etc/nginx/nginx.conf\n\
    else\n\
        echo "Warning: standalone config not found, using template with backend disabled"\n\
        export BACKEND_HOST=127.0.0.1\n\
        envsubst "\\$DOMAIN_NAME \\$BACKEND_HOST \\$BACKEND_PORT" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf\n\
    fi\n\
else\n\
    echo "Running in FULL mode - backend: $BACKEND_HOST:$BACKEND_PORT"\n\
    if ping -c 1 -W 5 "$BACKEND_HOST" >/dev/null 2>&1; then\n\
        echo "✓ Backend host $BACKEND_HOST is reachable"\n\
    else\n\
        echo "⚠ Backend host $BACKEND_HOST is not reachable - API calls will fail"\n\
    fi\n\
    \n\
    # Handle SSL certificate paths based on SSL_MODE\n\
    if [ "$SSL_MODE" = "selfsigned" ]; then\n\
        echo "Using self-signed certificates for local testing"\n\
        # Create Let'"'"'s Encrypt directory structure and symlink to self-signed certs\n\
        mkdir -p /etc/letsencrypt/live/$DOMAIN_NAME\n\
        if [ -f "/etc/ssl/certs/localhost.crt" ] && [ -f "/etc/ssl/private/localhost.key" ]; then\n\
            ln -sf /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem\n\
            ln -sf /etc/ssl/private/localhost.key /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem\n\
            ln -sf /etc/ssl/certs/localhost.crt /etc/letsencrypt/live/$DOMAIN_NAME/chain.pem\n\
            echo "✓ Self-signed certificates linked successfully"\n\
        else\n\
            echo "✗ Self-signed certificates not found in /etc/ssl/"\n\
            echo "Expected files: /etc/ssl/certs/localhost.crt and /etc/ssl/private/localhost.key"\n\
            exit 1\n\
        fi\n\
    else\n\
        echo "Using Let'"'"'s Encrypt certificates"\n\
        if [ ! -f "/etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem" ]; then\n\
            echo "✗ Let'"'"'s Encrypt certificates not found"\n\
            echo "Expected: /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem"\n\
            exit 1\n\
        fi\n\
    fi\n\
    \n\
    envsubst "\\$DOMAIN_NAME \\$BACKEND_HOST \\$BACKEND_PORT" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf\n\
fi\n\
\n\
echo "Nginx configuration processed successfully"\n\
\n\
echo "Testing nginx configuration..."\n\
if nginx -t; then\n\
    echo "✓ Nginx configuration is valid"\n\
    echo "Starting nginx..."\n\
    exec nginx -g "daemon off;"\n\
else\n\
    echo "✗ Nginx configuration test failed:"\n\
    nginx -t\n\
    echo "Generated configuration preview:"\n\
    head -50 /etc/nginx/nginx.conf\n\
    echo "..."\n\
    echo "Exiting due to invalid configuration"\n\
    exit 1\n\
fi' > /docker-entrypoint.sh && chmod +x /docker-entrypoint.sh

# Create nginx user and set permissions
RUN addgroup -g 1000 nginxuser &&\
    adduser -D -s /bin/sh -u 1000 -G nginxuser nginxuser

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Expose ports
EXPOSE 80 443

# Switch to nginx user
USER nginxuser

# Use custom entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
