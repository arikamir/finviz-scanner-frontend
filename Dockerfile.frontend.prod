# Multi-stage build for optimized production frontend
FROM nginx:alpine AS builder

# Install build tools
RUN apk add --no-cache gettext

# Copy configuration template
COPY nginx.conf.template /etc/nginx/nginx.conf.template

# Production stage
FROM nginx:alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache gettext curl && \
    rm -rf /var/cache/apk/*

# Copy HTML content
COPY frontend.html /usr/share/nginx/html/index.html

# Copy processed configuration
COPY --from=builder /etc/nginx/nginx.conf.template /etc/nginx/nginx.conf.template

# Create optimized startup script
RUN printf '#!/bin/sh\n\
# Set default domain if not provided\n\
export DOMAIN_NAME=${DOMAIN_NAME:-localhost}\n\
echo "Starting nginx with domain: $DOMAIN_NAME"\n\
envsubst "\$DOMAIN_NAME" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf\n\
echo "Nginx configuration processed successfully"\n\
# Test nginx configuration\n\
nginx -t\n\
if [ $? -eq 0 ]; then\n\
    echo "Nginx configuration is valid"\n\
    exec nginx -g "daemon off;"\n\
else\n\
    echo "Nginx configuration is invalid, exiting..."\n\
    exit 1\n\
fi\n' > /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Security: Create non-root user for nginx worker processes
RUN addgroup -g 1000 nginxuser && \
    adduser -D -s /bin/sh -u 1000 -G nginxuser nginxuser

# Expose ports
EXPOSE 80 443

# Optimized health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=2 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx with environment variable substitution
CMD ["/docker-entrypoint.sh"]
