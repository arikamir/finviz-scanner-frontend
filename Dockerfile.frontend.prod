# Multi-stage build for optimized production frontend
FROM nginx:alpine AS builder

# Install build tools
RUN apk add --no-cache gettext

# Copy configuration template
COPY nginx.conf.template /etc/nginx/nginx.conf.template

# Production stage
FROM nginx:alpine AS production

# Install only runtime dependencies
RUN apk add --no-cache gettext curl && \
    rm -rf /var/cache/apk/*

# Copy HTML content
COPY frontend.html /usr/share/nginx/html/index.html

# Copy processed configuration
COPY --from=builder /etc/nginx/nginx.conf.template /etc/nginx/nginx.conf.template
COPY nginx.conf.standalone /etc/nginx/nginx.conf.standalone
COPY nginx.conf.http-only /etc/nginx/nginx.conf.http-only

# Create optimized startup script
RUN printf '#!/bin/sh\n\
# Set default values\n\
export DOMAIN_NAME=${DOMAIN_NAME:-localhost}\n\
export BACKEND_HOST=${BACKEND_HOST:-backend}\n\
export BACKEND_PORT=${BACKEND_PORT:-8000}\n\
export STANDALONE_MODE=${STANDALONE_MODE:-false}\n\
export SSL_MODE=${SSL_MODE:-auto}\n\
\n\
echo "Starting nginx with domain: $DOMAIN_NAME"\n\
echo "SSL Mode: $SSL_MODE"\n\
\n\
# Check SSL certificate availability\n\
SSL_CERT_PATH="/etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem"\n\
SSL_KEY_PATH="/etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem"\n\
\n\
if [ "$SSL_MODE" = "auto" ]; then\n\
    if [ -f "$SSL_CERT_PATH" ] && [ -f "$SSL_KEY_PATH" ]; then\n\
        echo "✓ SSL certificates found - enabling HTTPS"\n\
        SSL_MODE="enabled"\n\
    else\n\
        echo "⚠ SSL certificates not found - running HTTP only"\n\
        SSL_MODE="disabled"\n\
    fi\n\
fi\n\
\n\
# Choose configuration based on SSL availability and mode\n\
if [ "$STANDALONE_MODE" = "true" ]; then\n\
    echo "Running in STANDALONE mode (no backend required)"\n\
    if [ -f "/etc/nginx/nginx.conf.standalone" ]; then\n\
        envsubst "\$DOMAIN_NAME" < /etc/nginx/nginx.conf.standalone > /etc/nginx/nginx.conf\n\
    else\n\
        echo "Warning: standalone config not found, using HTTP-only template"\n\
        # Create HTTP-only configuration\n\
        cat > /etc/nginx/nginx.conf << EOF\n\
events { worker_connections 1024; }\n\
http {\n\
    include /etc/nginx/mime.types;\n\
    default_type application/octet-stream;\n\
    server {\n\
        listen 80;\n\
        server_name $DOMAIN_NAME _;\n\
        root /usr/share/nginx/html;\n\
        index index.html;\n\
        location /health {\n\
            return 200 "healthy\\n";\n\
            add_header Content-Type text/plain;\n\
        }\n\
        location / { try_files \\$uri \\$uri/ /index.html; }\n\
    }\n\
}\n\
EOF\n\
    fi\n\
elif [ "$SSL_MODE" = "enabled" ]; then\n\
    echo "Running in FULL HTTPS mode - backend: $BACKEND_HOST:$BACKEND_PORT"\n\
    envsubst "\$DOMAIN_NAME \$BACKEND_HOST \$BACKEND_PORT" < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf\n\
else\n\
    echo "Running in HTTP-only mode - backend: $BACKEND_HOST:$BACKEND_PORT"\n\
    # Generate HTTP-only configuration from template\n\
    cat > /etc/nginx/nginx.conf << EOF\n\
events { worker_connections 1024; }\n\
http {\n\
    include /etc/nginx/mime.types;\n\
    default_type application/octet-stream;\n\
    \n\
    # Logging\n\
    access_log /var/log/nginx/access.log;\n\
    error_log /var/log/nginx/error.log warn;\n\
    \n\
    # Gzip compression\n\
    gzip on;\n\
    gzip_vary on;\n\
    gzip_min_length 1024;\n\
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;\n\
    \n\
    # Rate limiting\n\
    limit_req_zone \\$binary_remote_addr zone=api:10m rate=10r/s;\n\
    \n\
    server {\n\
        listen 80;\n\
        server_name $DOMAIN_NAME _;\n\
        root /usr/share/nginx/html;\n\
        index index.html;\n\
        \n\
        # Health check\n\
        location /health {\n\
            access_log off;\n\
            return 200 "healthy\\n";\n\
            add_header Content-Type text/plain;\n\
        }\n\
        \n\
        # Let'\''s Encrypt challenge location\n\
        location /.well-known/acme-challenge/ {\n\
            root /var/www/certbot;\n\
            try_files \\$uri =404;\n\
        }\n\
        \n\
        # API proxy to backend\n\
        location /api/ {\n\
            proxy_pass http://$BACKEND_HOST:$BACKEND_PORT/;\n\
            proxy_set_header Host \\$host;\n\
            proxy_set_header X-Real-IP \\$remote_addr;\n\
            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n\
            proxy_set_header X-Forwarded-Proto \\$scheme;\n\
            proxy_connect_timeout 30s;\n\
            proxy_send_timeout 30s;\n\
            proxy_read_timeout 30s;\n\
            limit_req zone=api burst=20 nodelay;\n\
        }\n\
        \n\
        # Frontend assets\n\
        location / {\n\
            try_files \\$uri \\$uri/ /index.html;\n\
            \n\
            # Security headers\n\
            add_header X-Frame-Options "SAMEORIGIN" always;\n\
            add_header X-XSS-Protection "1; mode=block" always;\n\
            add_header X-Content-Type-Options "nosniff" always;\n\
            add_header Referrer-Policy "no-referrer-when-downgrade" always;\n\
            add_header Content-Security-Policy "default-src '\''self'\'' http: https: data: blob: '\''unsafe-inline'\''" always;\n\
        }\n\
    }\n\
}\n\
EOF\n\
fi\n\
\n\
echo "Nginx configuration processed successfully"\n\
echo "Configuration mode: $([ "$SSL_MODE" = "enabled" ] && echo "HTTPS with SSL" || echo "HTTP only")"\n\
\n\
# Test nginx configuration with detailed output\n\
echo "Testing nginx configuration..."\n\
if nginx -t; then\n\
    echo "✓ Nginx configuration is valid"\n\
    echo "Starting nginx..."\n\
    exec nginx -g "daemon off;"\n\
else\n\
    echo "✗ Nginx configuration test failed:"\n\
    nginx -t\n\
    echo "Generated configuration preview:"\n\
    head -50 /etc/nginx/nginx.conf\n\
    echo "..."\n\
    echo "Exiting due to invalid configuration"\n\
    exit 1\n\
fi\n' > /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Security: Create non-root user for nginx worker processes
RUN addgroup -g 1000 nginxuser && \
    adduser -D -s /bin/sh -u 1000 -G nginxuser nginxuser

# Expose ports
EXPOSE 80 443

# Optimized health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=2 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx with environment variable substitution
CMD ["/docker-entrypoint.sh"]
